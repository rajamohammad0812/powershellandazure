name: PowerShell Execution & Terraform Deployment

on:
  workflow_dispatch:  # This still allows the workflow to be triggered manually from GitHub UI
    inputs:
      # If you want to allow users to trigger the workflow manually and still define any input, you can add inputs here.
      # However, if you don't want any user inputs, you can skip defining them here.
      # customerID:
      #   description: 'Customer ID'
      #   required: true
      #   type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Set up PowerShell
      - name: Set up PowerShell
        uses: actions/setup-powershell@v2

      # Run PowerShell Script to Generate Terraform Variables and Execute Terraform
      - name: Run PowerShell Script
        run: |
          pwsh ./path_to_your_powershell_script.ps1  # Adjust the path to your PowerShell script
        # Optional: You can specify environment variables if needed by the PowerShell script (only if it's not handled internally in the script)
        # env:
        #   CUSTOMER_ID: ${{ github.event.inputs.customerID }}   # If you choose to define inputs manually again

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.3.6'  # Specify the desired Terraform version

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init
        working-directory: ./terraform

      # Run Terraform Plan
      - name: Run Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      # Apply Terraform Plan
      - name: Apply Terraform Plan
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
